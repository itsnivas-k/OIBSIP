# -*- coding: utf-8 -*-
"""car price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CoRGuMuk9MgoipPM1WbkdCp_sjKPaQhk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
#Model_selection is a method for setting a blueprint to analyze data and then using it to measure new data.
#Train test split technique is used to estimate the performance of machine learning algorithms which are used to make predictions on data not used to train the model.
from sklearn.tree import DecisionTreeRegressor
# It classifies the data using true or false answers to certain questions. The resulting structure, when visualized, is in the form of a tree with different types of nodesâ€”root, internal, and leaf.


data = pd.read_csv("https://raw.githubusercontent.com/itsnivas-k/OIBSIP/main/Car%20Price%20Prediction/CarPrice.csv")
data.head()
#linking dataset from my github repo

data.isnull().sum()
#cheaking for non null values

data.info()
#cheaking data information

print(data.describe())
#displaying the describion of the car

sns.set_style("whitegrid")
plt.figure(figsize=(15, 10))
sns.distplot(data.price)
plt.show()
#displaying the values in density distribution

print(data.corr())
#The corr() method calculates the relationship between each column in the data set.

plt.figure(figsize=(20, 15))
correlations = data.corr()
sns.heatmap(correlations, cmap="coolwarm", annot=True)
plt.show()
#displaying the values in a heatmap

predict = "price"
data = data[["symboling", "wheelbase", "carlength", 
             "carwidth", "carheight", "curbweight", 
             "enginesize", "boreratio", "stroke", 
             "compressionratio", "horsepower", "peakrpm", 
             "citympg", "highwaympg", "price"]]
x = np.array(data.drop([predict], 1))
y = np.array(data[predict])

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2)

from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(xtrain, ytrain)
predictions = model.predict(xtest)

from sklearn.metrics import mean_absolute_error
model.score(xtest, predictions)
#Using DecisionTreeRegressor we are predicting the car price using its parameters